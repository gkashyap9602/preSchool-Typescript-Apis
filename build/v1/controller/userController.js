"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../models/index");
const helperFun_1 = require("../../utils/helperFun");
const message_1 = require("../../utils/message");
const http_status_codes_1 = __importDefault(require("http-status-codes"));
const bcrypt_1 = __importDefault(require("bcrypt"));
// console.log(http,"http");
exports.default = {
    hello_world,
    New_users,
};
// register new user and give him/her a unique username 
function New_users(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const salt = yield bcrypt_1.default.genSalt(10);
            const body = req.body;
            //  logic part of autogenerated username
            const today = new Date();
            const year = today.getFullYear().toString();
            const yearcode = parseInt(year.slice(-2));
            const usercount = yield index_1.UserModels.ModelUser.find({ role: 3 }).count();
            const count = (usercount + 1).toString();
            const usercode = count.padStart(2, 0);
            // check if user alreday exist or not 
            const finduser = yield index_1.UserModels.ModelUser.findOne({ email: body.email });
            console.log(finduser);
            if (finduser)
                throw new helperFun_1.error_Object(message_1.MESSAGES.USER_ALREADY_REGISTERED, http_status_codes_1.default.UNPROCESSABLE_ENTITY);
            body.password = yield bcrypt_1.default.hash(body.password, salt);
            // // const student_img = req.file.path;
            // // Student_Data.student_img = student_img;
            // assigning a auto generated username to the user
            Object.assign(body, { username: "PS" + yearcode + usercode });
            const UserSaved = yield new index_1.UserModels.ModelUser(body).save();
            const response = new helperFun_1.resp_Object(message_1.MESSAGES.USER_REGISTERED_SUCCESSFULLY, http_status_codes_1.default.CREATED, UserSaved);
            res.send(response);
        }
        catch (error) {
            // console.log("catch side", error);
            next(error);
        }
    });
}
function hello_world(req, res) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            res.send("hello user");
        }
        catch (error) {
            res.send(error);
        }
    });
}
